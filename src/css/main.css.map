{"version":3,"file":"main.css","sources":["main.scss","helpers/_variables.scss","helpers/_functions.scss","helpers/_mixins.scss","helpers/_placeholders.scss","base/_reboot.scss","base/_typography.scss","base/_animates.scss","components/_buttons.scss","layouts/_header.scss","pages/_homepage.scss"],"sourcesContent":["@import \"helpers/variables\";\n@import \"helpers/functions\";\n@import \"helpers/mixins\";\n@import \"helpers/placeholders\";\n\n@import \"base/reboot\";\n@import \"base/typography\";\n@import \"base/animates\";\n\n@import \"components/buttons\";\n\n@import \"layouts/header\";\n\n@import \"pages/homepage\";\n","/// Breakpoint map\n/// @prop {String} keys - Keys are identifiers mapped to a given length\n/// @prop {Map} values - Values are actual breakpoints expressed in pixels\n$break-points: (\n  'small': (min-width: 576px),\n  'medium': (min-width: 768px),\n  'lagre': (min-width: 992px),\n  'huge': (min-width: 1200px),\n) !default;\n\n$grid: (\n  columns: 12,\n  container: 1120px,\n  box-sizing: border-box,\n);\n","/// Get a z-index value from a layer name\n/// @access public\n/// @param {String} $layer - Layerâ€™s name\n/// @return {Number}\n/// @require $z-indexes\n@function z($layer) {\n  @return map-get($z-indexes, $layer);\n}\n","/// Helper to size an element\n/// @param {Lenght} $width\n/// @param {Height} $height\n@mixin size($width, $height: $width) {\n  width: $width;\n  height: $height;\n}\n\n/// Minxin to output vendor prefixes\n/// @param {String} $property - Unprefixed CSS property\n/// @param {*} $value - Raw CSS value\n/// @param {List} $prefixes - List of prefixes to output\n@mixin prefix($property, $value, $prefixes: ()) {\n  #{$property}: $value;\n\n  @each $prefix in $prefixes {\n    -#{$prefix}-#{$property}: $value;\n  }\n}\n\n///\n/// @param {String} $break-point -\n@mixin respond-to($break-point) {\n  $raw-query: map_get($break-points, $break-point);\n\n  @if $raw-query {\n    $query: if(\n        type_of($raw-query) == 'string',\n        unquote($raw-query),\n        inspect($raw-query)\n    );\n\n    @media #{$query} {\n      @content\n    }\n  } @else {\n    @error 'No value for `#{$break-point}`.'\n  }\n}\n","","*,\n*:before,\n*:after {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\nhtml {\n  box-sizing: border-box;\n}\n\nul {\n  list-style-type: none;\n}\n","","","button {\n  cursor: pointer;\n}\n",".header {\n  display: flex;\n  flex-wrap: wrap;\n  align-items: center;\n  background-image: radial-gradient(circle 248px at center, #16d9e3 0%, #30c7ec 47%, #46aef7 100%);\n\n  &__search {\n\n  }\n\n  &__search-form {\n    @include size(500px, null);\n  }\n\n  &__search-input {\n    @include size(400px, 40px);\n    margin-right: -4px;\n    border: none;\n    outline: none;\n    border-radius: 9999px 0 0 9999px;\n    background: #fff;\n  }\n\n  &__search-button {\n    @include size(100px, 40px);\n    border: none;\n    outline: none;\n    border-radius: 0 9999px 9999px 0;\n    background-image: linear-gradient(to right, #6a11cb 0%, #2575fc 100%);\n    color: #fff;\n    font-weight: bold;\n  }\n}\n",""],"names":[],"mappings":"AKAA,AAAA,CAAC;AACD,CAAC,AAAA,OAAO;AACR,CAAC,AAAA,MAAM,CAAC;EACN,MAAM,EAAE,CAAC;EACT,OAAO,EAAE,CAAC;EACV,UAAU,EAAE,UAAU;CACvB;;AAED,AAAA,IAAI,CAAC;EACH,UAAU,EAAE,UAAU;CACvB;;AAED,AAAA,EAAE,CAAC;EACD,eAAe,EAAE,IAAI;CACtB;;AGdD,AAAA,MAAM,CAAC;EACL,MAAM,EAAE,OAAO;CAChB;;ACFD,AAAA,OAAO,CAAC;EACN,OAAO,EAAE,IAAI;EACb,SAAS,EAAE,IAAI;EACf,WAAW,EAAE,MAAM;EACnB,gBAAgB,EAAE,8EAA8E;CA4BjG;;AAtBE,AAAD,oBAAc,CAAC;ENNf,KAAK,EMOW,KAAK;CACpB;;AAEA,AAAD,qBAAe,CAAC;ENVhB,KAAK,EMWW,KAAK;ENVrB,MAAM,EMUiB,IAAI;EACzB,YAAY,EAAE,IAAI;EAClB,MAAM,EAAE,IAAI;EACZ,OAAO,EAAE,IAAI;EACb,aAAa,EAAE,iBAAiB;EAChC,UAAU,EAAE,IAAI;CACjB;;AAEA,AAAD,sBAAgB,CAAC;ENnBjB,KAAK,EMoBW,KAAK;ENnBrB,MAAM,EMmBiB,IAAI;EACzB,MAAM,EAAE,IAAI;EACZ,OAAO,EAAE,IAAI;EACb,aAAa,EAAE,iBAAiB;EAChC,gBAAgB,EAAE,mDAAmD;EACrE,KAAK,EAAE,IAAI;EACX,WAAW,EAAE,IAAI;CAClB"}